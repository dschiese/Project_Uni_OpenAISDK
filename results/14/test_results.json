{"exitCode":0,"harnessOutput":"{\n    \"django__django-11133\": {\n        \"patch_is_None\": false,\n        \"patch_exists\": true,\n        \"patch_successfully_applied\": true,\n        \"resolved\": false,\n        \"tests_status\": {\n            \"FAIL_TO_PASS\": {\n                \"success\": [],\n                \"failure\": [\n                    \"test_memoryview_content (httpwrappers.tests.HttpResponseTests)\"\n                ]\n            },\n            \"PASS_TO_PASS\": {\n                \"success\": [],\n                \"failure\": [\n                    \"test_streaming_response (httpwrappers.tests.StreamingHttpResponseTests)\",\n                    \"test_cookie_edgecases (httpwrappers.tests.CookieTests)\",\n                    \"Semicolons and commas are decoded.\",\n                    \"Semicolons and commas are encoded.\",\n                    \"test_httponly_after_load (httpwrappers.tests.CookieTests)\",\n                    \"test_invalid_cookies (httpwrappers.tests.CookieTests)\",\n                    \"test_load_dict (httpwrappers.tests.CookieTests)\",\n                    \"test_nonstandard_keys (httpwrappers.tests.CookieTests)\",\n                    \"test_pickle (httpwrappers.tests.CookieTests)\",\n                    \"test_python_cookies (httpwrappers.tests.CookieTests)\",\n                    \"test_repeated_nonstandard_keys (httpwrappers.tests.CookieTests)\",\n                    \"test_samesite (httpwrappers.tests.CookieTests)\",\n                    \"test_response (httpwrappers.tests.FileCloseTests)\",\n                    \"test_streaming_response (httpwrappers.tests.FileCloseTests)\",\n                    \"test_json_response_custom_encoder (httpwrappers.tests.JsonResponseTests)\",\n                    \"test_json_response_list (httpwrappers.tests.JsonResponseTests)\",\n                    \"test_json_response_non_ascii (httpwrappers.tests.JsonResponseTests)\",\n                    \"test_json_response_passing_arguments_to_json_dumps (httpwrappers.tests.JsonResponseTests)\",\n                    \"test_json_response_raises_type_error_with_default_setting (httpwrappers.tests.JsonResponseTests)\",\n                    \"test_json_response_text (httpwrappers.tests.JsonResponseTests)\",\n                    \"test_json_response_uuid (httpwrappers.tests.JsonResponseTests)\",\n                    \"test_invalid_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"test_not_allowed (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"test_not_allowed_repr (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"test_not_allowed_repr_no_content_type (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"test_not_modified (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"test_not_modified_repr (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"test_redirect (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"Make sure HttpResponseRedirect works with lazy strings.\",\n                    \"test_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests)\",\n                    \"test_dict_behavior (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_file_interface (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_headers_type (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_iter_content (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_iterator_isnt_rewound (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_lazy_content (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_long_line (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_newlines_in_headers (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_non_string_content (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_stream_interface (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_unsafe_redirect (httpwrappers.tests.HttpResponseTests)\",\n                    \"test_basic_mutable_operations (httpwrappers.tests.QueryDictTests)\",\n                    \"test_create_with_no_args (httpwrappers.tests.QueryDictTests)\",\n                    \"test_duplicates_in_fromkeys_iterable (httpwrappers.tests.QueryDictTests)\",\n                    \"test_fromkeys_empty_iterable (httpwrappers.tests.QueryDictTests)\",\n                    \"test_fromkeys_is_immutable_by_default (httpwrappers.tests.QueryDictTests)\",\n                    \"test_fromkeys_mutable_override (httpwrappers.tests.QueryDictTests)\",\n                    \"test_fromkeys_noniterable (httpwrappers.tests.QueryDictTests)\",\n                    \"test_fromkeys_with_nondefault_encoding (httpwrappers.tests.QueryDictTests)\",\n                    \"test_fromkeys_with_nonempty_value (httpwrappers.tests.QueryDictTests)\",\n                    \"test_immutability (httpwrappers.tests.QueryDictTests)\",\n                    \"test_immutable_basic_operations (httpwrappers.tests.QueryDictTests)\",\n                    \"test_immutable_get_with_default (httpwrappers.tests.QueryDictTests)\",\n                    \"test_missing_key (httpwrappers.tests.QueryDictTests)\",\n                    \"Test QueryDict with two key/value pairs with same keys.\",\n                    \"A copy of a QueryDict is mutable.\",\n                    \"test_mutable_delete (httpwrappers.tests.QueryDictTests)\",\n                    \"#13572 - QueryDict with a non-default encoding\",\n                    \"test_pickle (httpwrappers.tests.QueryDictTests)\",\n                    \"test_querydict_fromkeys (httpwrappers.tests.QueryDictTests)\",\n                    \"Test QueryDict with one key/value pair\",\n                    \"Regression test for #8278: QueryDict.update(QueryDict)\",\n                    \"test_urlencode (httpwrappers.tests.QueryDictTests)\",\n                    \"test_urlencode_int (httpwrappers.tests.QueryDictTests)\"\n                ]\n            },\n            \"FAIL_TO_FAIL\": {\n                \"success\": [],\n                \"failure\": []\n            },\n            \"PASS_TO_FAIL\": {\n                \"success\": [],\n                \"failure\": []\n            }\n        }\n    }\n}"}